#include "Effekseer3DEffectManager.h"
#include "EffekseerForDXLib.h"
#include "DrawFunctions.h"
#include <cassert>

namespace EffectID
{
	std::string player_dead = "explosion2";				// プレイヤー死亡時に出すエフェクト
	std::string player_boost = "starFire";				// プレイヤーブースト時に継続的に出すエフェクト
	std::string player_acceleration = "acceleration";	// プレイヤーブースト時に一度だけ出すエフェクト
	std::string meteor = "boost";						// 隕石用エフェクト
}

namespace
{
	// エフェクトのファイルパス
	const std::string data_file_path = "Data/Effect/";

	// エフェクトの拡張子
	const std::string data_extension = ".efk";
}

// コンストラクタ
Effekseer3DEffectManager::Effekseer3DEffectManager():
	imgHandle_(-1)
{
	
}

// デストラクタ
Effekseer3DEffectManager::~Effekseer3DEffectManager()
{
}

// Effekseer3DEffectManagerの唯一のインスタンスを返す
Effekseer3DEffectManager& Effekseer3DEffectManager::GetInstance()
{
	// 唯一の実態
	static Effekseer3DEffectManager instance;

	// 唯一の実態参照を返す
	return instance;
}

// Effekseerの初期化とエフェクトのロード
void Effekseer3DEffectManager::Init()
{
//	auto manager = ::Effekseer::Manager::Create(3000);

	// Effekseerを初期化する
	// 引数には画面に表示する最大パーティクル数を設定する
	if (Effkseer_Init(8000) == -1)
	{
		// 初期化の失敗
		assert(0);
	}

	// 画像のロード
	imgHandle_ = my::MyLoadGraph("Data/Effect/background.png");

	// ここから↓でEffectをロードする
	LoadEffectFile(EffectID::player_dead.c_str());	
	LoadEffectFile(EffectID::player_boost.c_str());		
	LoadEffectFile(EffectID::player_acceleration.c_str());	
	LoadEffectFile(EffectID::meteor.c_str());		
}

// 更新
void Effekseer3DEffectManager::Update()
{
	// DXライブラリのカメラとEffekseerのカメラを同期する
	Effekseer_Sync3DSetting();

	// Effekseerにより再生中のエフェクトを更新する
	UpdateEffekseer3D();
}

// 描画
void Effekseer3DEffectManager::Draw()
{
	// 何でもいいので画像を描画する
	// こうして描画した後でないと、Effekseerは描画できない
	DrawGraph(0, 0, imgHandle_, true);

	// Effekseerにより再生中のエフェクトを描画する 
	DrawEffekseer3D();
}

// 終了処理
void Effekseer3DEffectManager::End()
{
	// 画像の削除
	DeleteGraph(imgHandle_);

	// エフェクトリソースを削除する(Effekseer終了時に破棄されるので削除しなくてもいい)
	for (auto& effectResource : effectResourceHandleTable_)
	{
		DeleteEffekseerEffect(effectResource.second);
	}

	// Effekseerを終了する
	Effkseer_End();
}

// エフェクトのロード
void Effekseer3DEffectManager::LoadEffectFile(std::string fileName)
{
	std::string path = data_file_path;
	path += fileName;
	path += data_extension;

	// エフェクトのロード(失敗したら止める)
	int handle = LoadEffekseerEffect(path.c_str());
	assert(handle != -1);	// -1以外じゃなかったら止める

	// ロードしたエフェクトのハンドルの保存
	effectResourceHandleTable_[fileName] = handle;
}

// 指定のエフェクトの再生
void Effekseer3DEffectManager::PlayEffect(std::string fileName, bool isForcePlay, VECTOR pos, float scale, float speed, VECTOR rot)
{
	// エフェクトリソースに指定したエフェクトがロードされていない場合止める
	assert(effectResourceHandleTable_.find(fileName) != effectResourceHandleTable_.end());

	if (!isForcePlay)
	{
		// 再生中の場合再生しない
		if (IsPlayingEffect(fileName))	return;
	}
	
	// エフェクトの再生(失敗したら止める)
	playingEffectHandleTable_[fileName] = PlayEffekseer3DEffect(effectResourceHandleTable_[fileName]);
	assert(playingEffectHandleTable_[fileName] != -1); // -1以外じゃなかったら止める

	// エフェクトの再生速度を設定
	SetSpeedPlayingEffekseer3DEffect(playingEffectHandleTable_[fileName], speed);

	// エフェクトの拡大率の設定
	SetScalePlayingEffekseer3DEffect(playingEffectHandleTable_[fileName], scale, scale, scale);

	// エフェクトの回転率の設定
	SetRotationPlayingEffekseer3DEffect(playingEffectHandleTable_[fileName], rot.x, rot.y, rot.z);

	// エフェクトの位置の設定
	SetPosPlayingEffekseer3DEffect(playingEffectHandleTable_[fileName], pos.x, pos.y, pos.z);
}

void Effekseer3DEffectManager::SetPosPlayingEffect(std::string fileName, VECTOR pos)
{
	// エフェクトリソースに指定したエフェクトがロードされていない場合止める
	assert(playingEffectHandleTable_.find(fileName) != playingEffectHandleTable_.end());

	// エフェクトの位置の設定
	SetPosPlayingEffekseer3DEffect(playingEffectHandleTable_[fileName], pos.x, pos.y, pos.z);
}

void Effekseer3DEffectManager::SetScalePlayingEffect(std::string fileName, float scale)
{
	// エフェクトリソースに指定したエフェクトがロードされていない場合止める
	assert(playingEffectHandleTable_.find(fileName) != playingEffectHandleTable_.end());

	// エフェクトの拡大率の設定
	SetScalePlayingEffekseer3DEffect(playingEffectHandleTable_[fileName], scale, scale, scale);
}

void Effekseer3DEffectManager::SetSpeedPlayingEffect(std::string fileName, float speed)
{
	// エフェクトリソースに指定したエフェクトがロードされていない場合止める
	assert(playingEffectHandleTable_.find(fileName) != playingEffectHandleTable_.end());

	// エフェクトの再生速度を設定
	SetSpeedPlayingEffekseer3DEffect(playingEffectHandleTable_[fileName], speed);
}

void Effekseer3DEffectManager::SetRotPlayingEffect(std::string fileName, VECTOR rot)
{
	// エフェクトリソースに指定したエフェクトがロードされていない場合止める
	assert(playingEffectHandleTable_.find(fileName) != playingEffectHandleTable_.end());

	// エフェクトの回転率の設定
	SetRotationPlayingEffekseer3DEffect(playingEffectHandleTable_[fileName], rot.x, rot.y, rot.z);
}

// 特定のエフェクトが再生中か
bool Effekseer3DEffectManager::IsPlayingEffect(std::string fileName)
{
	if (IsEffekseer3DEffectPlaying(playingEffectHandleTable_[fileName]) == 0)
	{
		return true;
	}
	return false;
}

// 特定のエフェクトの再生をストップ
void Effekseer3DEffectManager::StopEffect(std::string fileName)
{
	StopEffekseer3DEffect(playingEffectHandleTable_[fileName]);
}

// エフェクト全ての再生をストップ
void Effekseer3DEffectManager::StopAllEffect()
{
	for (auto& effect : playingEffectHandleTable_)
	{
		StopEffekseer3DEffect(effect.second);
	}
}